//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DemoBlog.WebUI.wcfUserService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="wcfUserService.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CreateUser", ReplyAction="http://tempuri.org/IUserService/CreateUserResponse")]
        DemoBlog.DataAccess.ViewModel.dbActionResult CreateUser(DemoBlog.DataAccess.ViewModel.RegisterViewModel UserModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CreateUser", ReplyAction="http://tempuri.org/IUserService/CreateUserResponse")]
        System.Threading.Tasks.Task<DemoBlog.DataAccess.ViewModel.dbActionResult> CreateUserAsync(DemoBlog.DataAccess.ViewModel.RegisterViewModel UserModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsValidUser", ReplyAction="http://tempuri.org/IUserService/IsValidUserResponse")]
        DemoBlog.DataAccess.ViewModel.UserValidationViewModel IsValidUser(DemoBlog.DataAccess.ViewModel.LoginViewModel UserModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsValidUser", ReplyAction="http://tempuri.org/IUserService/IsValidUserResponse")]
        System.Threading.Tasks.Task<DemoBlog.DataAccess.ViewModel.UserValidationViewModel> IsValidUserAsync(DemoBlog.DataAccess.ViewModel.LoginViewModel UserModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UserListSelectAll", ReplyAction="http://tempuri.org/IUserService/UserListSelectAllResponse")]
        DemoBlog.DataAccess.ViewModel.UserList[] UserListSelectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UserListSelectAll", ReplyAction="http://tempuri.org/IUserService/UserListSelectAllResponse")]
        System.Threading.Tasks.Task<DemoBlog.DataAccess.ViewModel.UserList[]> UserListSelectAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUser", ReplyAction="http://tempuri.org/IUserService/DeleteUserResponse")]
        DemoBlog.DataAccess.ViewModel.dbActionResult DeleteUser(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUser", ReplyAction="http://tempuri.org/IUserService/DeleteUserResponse")]
        System.Threading.Tasks.Task<DemoBlog.DataAccess.ViewModel.dbActionResult> DeleteUserAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CreateAdminUser", ReplyAction="http://tempuri.org/IUserService/CreateAdminUserResponse")]
        DemoBlog.DataAccess.ViewModel.dbActionResult CreateAdminUser(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CreateAdminUser", ReplyAction="http://tempuri.org/IUserService/CreateAdminUserResponse")]
        System.Threading.Tasks.Task<DemoBlog.DataAccess.ViewModel.dbActionResult> CreateAdminUserAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsUserNameExists", ReplyAction="http://tempuri.org/IUserService/IsUserNameExistsResponse")]
        bool IsUserNameExists(string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsUserNameExists", ReplyAction="http://tempuri.org/IUserService/IsUserNameExistsResponse")]
        System.Threading.Tasks.Task<bool> IsUserNameExistsAsync(string UserName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : DemoBlog.WebUI.wcfUserService.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<DemoBlog.WebUI.wcfUserService.IUserService>, DemoBlog.WebUI.wcfUserService.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DemoBlog.DataAccess.ViewModel.dbActionResult CreateUser(DemoBlog.DataAccess.ViewModel.RegisterViewModel UserModel) {
            return base.Channel.CreateUser(UserModel);
        }
        
        public System.Threading.Tasks.Task<DemoBlog.DataAccess.ViewModel.dbActionResult> CreateUserAsync(DemoBlog.DataAccess.ViewModel.RegisterViewModel UserModel) {
            return base.Channel.CreateUserAsync(UserModel);
        }
        
        public DemoBlog.DataAccess.ViewModel.UserValidationViewModel IsValidUser(DemoBlog.DataAccess.ViewModel.LoginViewModel UserModel) {
            return base.Channel.IsValidUser(UserModel);
        }
        
        public System.Threading.Tasks.Task<DemoBlog.DataAccess.ViewModel.UserValidationViewModel> IsValidUserAsync(DemoBlog.DataAccess.ViewModel.LoginViewModel UserModel) {
            return base.Channel.IsValidUserAsync(UserModel);
        }
        
        public DemoBlog.DataAccess.ViewModel.UserList[] UserListSelectAll() {
            return base.Channel.UserListSelectAll();
        }
        
        public System.Threading.Tasks.Task<DemoBlog.DataAccess.ViewModel.UserList[]> UserListSelectAllAsync() {
            return base.Channel.UserListSelectAllAsync();
        }
        
        public DemoBlog.DataAccess.ViewModel.dbActionResult DeleteUser(int UserID) {
            return base.Channel.DeleteUser(UserID);
        }
        
        public System.Threading.Tasks.Task<DemoBlog.DataAccess.ViewModel.dbActionResult> DeleteUserAsync(int UserID) {
            return base.Channel.DeleteUserAsync(UserID);
        }
        
        public DemoBlog.DataAccess.ViewModel.dbActionResult CreateAdminUser(int UserID) {
            return base.Channel.CreateAdminUser(UserID);
        }
        
        public System.Threading.Tasks.Task<DemoBlog.DataAccess.ViewModel.dbActionResult> CreateAdminUserAsync(int UserID) {
            return base.Channel.CreateAdminUserAsync(UserID);
        }
        
        public bool IsUserNameExists(string UserName) {
            return base.Channel.IsUserNameExists(UserName);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserNameExistsAsync(string UserName) {
            return base.Channel.IsUserNameExistsAsync(UserName);
        }
    }
}
